#!/bin/bash -
#===============================================================================
#   DESCRIPTION: Generate a bash script template
#
#        AUTHOR: Patrick Brideau
#       CREATED: 2021-01-29
#      REVISION: 0.0.3: Use semver_compare for common version validation
#                0.1.0: Add ~/.genbashrc config for author
#===============================================================================
# template: 2021.01.29
VERSION="0.1.0"
REQUIRED_COMMON_VERSION="2021.02.13"

set -o nounset   # Treat unset variable as an error
shopt -s extglob # Extended pattern matching

################################################################################
# Return codes
# Limit user-defined exit codes to the range 64-113
# See /usr/include/sysexits.h for common examples
export EX_USAGE=64 # Command line usage error

################################################################################
# Dependency
function check_dependency {
	local common_path=""
	local search_common_path=(
		"${DIRNAME}/common.sh"
		"$HOME/.local/lib/bash-libs/common.sh"
	)

	for p in "${search_common_path[@]}"; do
		if [ -f "$p" ]; then
			# shellcheck source=./common.sh
			source "$p"
			common_path="$p"
			break
		fi
	done

	if [ "$common_path" = "" ]; then
		echo "Could not find common.sh:"
		for p in "${search_common_path[@]}"; do
			echo "  $p"
		done
		echo "You could find it on: https://github.com/pbrideau/bash-libs"
		exit 1
	fi

	local compare
	compare=$(semver_compare "$COMMON_VERSION" "$REQUIRED_COMMON_VERSION")

	if [ "$compare" -eq -1 ]; then
		echo "This script require common.sh >= v$REQUIRED_COMMON_VERSION"
		echo "But v$COMMON_VERSION found"
		echo "(loaded from $common_path)"
		exit "$EX_FAIL"
	fi

	if ! command -v getopt &> /dev/null; then
		echo "This script require getopt, please install it"
		exit "$EX_NOTFOUND"
	fi
}

################################################################################
# VERSION
function version {
	echo "$BASENAME, version $VERSION"
	echo "common.sh, version $COMMON_VERSION"
	echo
	echo "Copyright (C) 2020-2021 Patrick Brideau"
	echo
	echo "This program is free software: you can redistribute it and/or modify"
	echo "it under the terms of the GNU General Public License as published by"
	echo "the Free Software Foundation, either version 3 of the License, or"
	echo "(at your option) any later version."
	echo
	echo "This program is distributed in the hope that it will be useful,"
	echo "but WITHOUT ANY WARRANTY; without even the implied warranty of"
	echo "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
	echo "GNU General Public License for more details."
	echo
	echo "You should have received a copy of the GNU General Public License"
	echo "along with this program.  If not, see <https://www.gnu.org/licenses/>."
}

################################################################################
# USAGE
function usage {
	echo "Usage: $BASENAME [options] Target"
	echo
	echo "Examples:"
	echo "  $BASENAME --config my_new_script"
	echo "  $BASENAME --config /home/foobar/my_new_script"
	echo
	echo "Options:"
	echo "   -h, --help                Show this message"
	echo "   -d, --debug               Show debug log"
	echo "   -v, --verbose             Show verbose log (multiple -v is --debug)"
	echo "   -q, --quiet               Show only error logs (default warn)"
	echo "   -V, --version             Display script version and exit"
	echo "   --no-colors               Disable colored output"
	echo
	echo "   --docopt                  Use the docopt template (default getopt)"
	echo
	echo "Template options:"
	echo "   --common                  Enable source of common.sh"
	echo "   --example                 Enable examples"
	echo "   --config                  Enable config parsing"
	echo "   --yes                     Enable always-yes"
	echo "   --parseable               Enable parseable"
	echo "   --set-e                   Enable set -e at the start of the script"
	echo "   --sigusr                  Enable trap for sigusr"
	echo
	echo "Return codes:"
	echo "  64   EX_USAGE              Command line usage error"
	echo "  125  EX_FAIL               Command itself fail"
	echo "  127  EX_NOTFOUND           File not found"
}

################################################################################
# MAIN
function main {
	log 3 "========== function ${FUNCNAME[0]}"

	log 2 "Generating bash script : $TARGET_TEMPLATE"

	cp "$BASH_TEMPLATE_PATH" "$TARGET_TEMPLATE"
	chmod +x "$TARGET_TEMPLATE"

	reformat_template 'set-e' "$REMOVE_SETE"
	reformat_template 'common' "$REMOVE_COMMON"
	reformat_template 'config' "$REMOVE_CONFIG"
	reformat_template 'example' "$REMOVE_EXAMPLE"
	reformat_template 'parseable' "$REMOVE_PARSEABLE"
	reformat_template 'yes' "$REMOVE_YES"
	reformat_template 'sigusr' "$REMOVE_SIGUSR"

	sed -i -re "s/CREATED: ---/CREATED: $(date +%F)/" "$TARGET_TEMPLATE"

	if [ -n "${AUTHOR:-}" ]; then
		sed -i -re "s/AUTHOR: ---/AUTHOR: $AUTHOR/" "$TARGET_TEMPLATE"
	fi

	if [ "$REMOVE_COMMON" = true ]; then
		insert_common_functions
		insert_common_retcode
	else
		local ver
		ver=$(awk -F "=" '/COMMON_VERSION/ {print $2}' "$BASH_COMMON")
		sed -i -re "s/(REQUIRED_COMMON_VERSION=).*/\1$ver/" "$TARGET_TEMPLATE"

		sed -i -re "/^[[:space:]]*## --common insert ##/d" \
			-e "/^[[:space:]]*## --common retcode ##/d" \
			"$TARGET_TEMPLATE"
	fi

	# shellcheck disable=SC2154
	# bldgrn and txtrst are defined in common.sh but shellcheck cannot find them
	log chkok "${bldgrn}$TARGET_TEMPLATE${txtrst} created successfully"
}

function reformat_template {
	local arg_to_replace=$1
	local remove=$2
	if [ "$remove" = true ]; then
		sed -i -re " \
			/^[[:space:]]*## --${arg_to_replace} start ##/, \
			/^[[:space:]]*## --${arg_to_replace} end ##/d" \
			"$TARGET_TEMPLATE"
	else
		sed -i -re "/^[[:space:]]*## --${arg_to_replace} start ##/d" \
			-e "/^[[:space:]]*## --${arg_to_replace} end ##/d" \
			"$TARGET_TEMPLATE"
	fi
}

function insert_common_retcode {
	# This will only insert return code <128
	num_regex='([0-9]|[1-9][0-9]|1[01][0-9]|12[0-7])'

	tmp_file=$(mktemp)
	trap 'rm $tmp_file' EXIT

	sed -nr "/.*EX_[A-Z]*=${num_regex}[^0-9]+/p" "$BASH_COMMON" > "$tmp_file"
	sed -i "/## --common retcode ##/ {
			h
			r $tmp_file
			g
			N
		}" "$TARGET_TEMPLATE"

	sed -i -re "/^[[:space:]]*## --common retcode ##/d" "$TARGET_TEMPLATE"
	trap - EXIT
	rm "$tmp_file"
}

function insert_common_functions {
	local ver
	ver=$(awk -F "=" '/COMMON_VERSION/ {print $2}' "$BASH_COMMON")
	log 3 "Version of common.sh is $ver"

	log 3 "Inserting log() and set_colors() functions"
	local tmp_file
	tmp_file=$(mktemp)
	trap 'rm $tmp_file' EXIT

	sed -n '/^function log {$/,/^}$/p' "$BASH_COMMON" >> "$tmp_file"
	sed -n '/^function set_colors {$/,/^}$/p' "$BASH_COMMON" >> "$tmp_file"

	sed -i "/^function log {$/ a #from COMMON_VERSION=$ver" "$tmp_file"
	sed -i "/^function set_colors {$/ a #from COMMON_VERSION=$ver" "$tmp_file"

	sed -i "/## --common insert ##/ {
			h
			r $tmp_file
			g
			N
		}" "$TARGET_TEMPLATE"

	sed -i -re "/^[[:space:]]*## --common insert ##/d" "$TARGET_TEMPLATE"
	trap - EXIT
	rm "$tmp_file"
}

function validate_inputs {
	log 3 "========== function ${FUNCNAME[0]}"

	if [ -e "$TARGET_TEMPLATE" ]; then
		log 0 "File '$TARGET_TEMPLATE' already exists"
		exit "$EX_ERROR"
	fi

	if [ "$REMOVE_COMMON" = true ]; then
		log 1 'Function log() and set_colors() are required'
		log 1 'They will be added inline in your script'
		prompt_user_abort 'Do you want to continue?'
	fi

	if [ -z "${AUTHOR:-}" ]; then
		log 1 "No author configured"
		log 1 "You can add 'AUTHOR=\"Foo Bar\"' in $GENBASH_CONFIG"
		prompt_user_abort "Do you want to continue?"
	fi

	if ! touch "$TARGET_TEMPLATE" &> /dev/null; then
		log 0 "Cannot write to '$TARGET_TEMPLATE'"
		exit "$EX_ERROR"
	fi

	TARGET_TEMPLATE=$(readlink -f "$TARGET_TEMPLATE")

	log 3 "Locating bash-template"
	case "$BASH_TEMPLATE" in
		getopt)
			if [ -e "${DIRNAME}/bash-template" ]; then
				BASH_TEMPLATE_PATH="${DIRNAME}/bash-template"
			elif [ -e "${HOME}/.local/share/bash-libs/bash-template" ]; then
				BASH_TEMPLATE_PATH="${HOME}/.local/share/bash-libs/bash-template"
			else
				log 0 "Could not locate bash-template"
				log 0 "Was ${BASENAME} installed correctly?"
				exit "$EX_FAIL"
			fi
			;;
		docopt)
			if [ -e "${DIRNAME}/bash-template-docopt" ]; then
				BASH_TEMPLATE_PATH="${DIRNAME}/bash-template-docopt"
			elif [ -e "${HOME}/.local/share/bash-libs/bash-template-docopt" ]; then
				BASH_TEMPLATE_PATH="${HOME}/.local/share/bash-libs/bash-template-docopt"
			else
				log 0 "Could not locate bash-template-docopts"
				log 0 "Was ${BASENAME} installed correctly?"
				exit "$EX_FAIL"
			fi
			;;

	esac

	log 3 "Locating common.sh"
	if [ -e "${DIRNAME}/common.sh" ]; then
		BASH_COMMON="${DIRNAME}/common.sh"
	elif [ -e "${HOME}/.local/share/bash-libs/common.sh" ]; then
		BASH_COMMON="${HOME}/.local/share/bash-libs/common.sh"
	else
		log 0 "Could not locate common.sh"
		log 0 "Was ${BASENAME} installed correctly?"
		exit "$EX_FAIL"
	fi

	if [ "$REMOVE_EXAMPLE" = false ]; then
		log 1 "Note that --examples requires the following:"
		log 1 "  --common"
		log 1 "  --yes"
	fi
}

################################################################################
# ARGS PARSE
function load_arg {
	declare -A OPTIONS=(
		['h']='help'
		['d']='debug'
		['v']='verbose'
		['q']='quiet'
		['V']='version'
	)
	declare -a OPTIONS_NOSHORT=(
		'no-colors'

		'docopt'

		'set-e'
		'common'
		'config'
		'example'
		'yes'
		'parseable'
	)

	IFS=','
	LONG_OPTIONS="${OPTIONS[*]},${OPTIONS_NOSHORT[*]}"
	IFS=''
	SHORT_OPTIONS="${!OPTIONS[*]}"
	unset IFS

	opt=$(getopt -o "$SHORT_OPTIONS" --long "$LONG_OPTIONS" -- "$@")
	rc=$?
	if [ "$rc" -ne 0 ]; then
		exit "$EX_USAGE"
	fi
	eval set -- "$opt"
	unset opt rc
	while true; do
		case "$1" in
			-h | --help)
				usage
				exit 0
				;;
			-d | --debug)
				LOG_LEVEL=3
				;;
			-v | --verbose)
				LOG_LEVEL=$LOG_LEVEL+1
				;;
			-q | --quiet)
				LOG_LEVEL=0
				;;
			-V | --version)
				version
				exit
				;;
			--no-colors)
				COLORS=false
				;;
			--docopt)
				BASH_TEMPLATE="docopt"
				;;
			--set-e)
				REMOVE_SETE=false
				;;
			--common)
				REMOVE_COMMON=false
				;;
			--config)
				REMOVE_CONFIG=false
				;;
			--example)
				REMOVE_COMMON=false
				REMOVE_EXAMPLE=false
				REMOVE_YES=false
				;;
			--parseable)
				REMOVE_PARSEABLE=false
				;;
			--yes)
				REMOVE_YES=false
				;;
			--sigusr)
				REMOVE_SIGUSR=false
				;;
			--)
				shift
				break
				;;
			*)
				log 0 "No such parameter: '$1'"
				exit "$EX_FAIL"
				;;
		esac
		shift
	done
	END_LOAD_ARG=("$@")
}

BASENAME=$(basename "$0")
if [ -L "${BASH_SOURCE[0]}" ]; then
	DIRNAME="$(dirname "$(readlink -e "${BASH_SOURCE[0]}")")"
else
	DIRNAME="$(dirname "${BASH_SOURCE[0]}")"
fi
export COLORS=true
declare -gi LOG_LEVEL=1
GENBASH_CONFIG="$HOME/.genbashrc"
BASH_TEMPLATE="getopt"

if [ -e "$GENBASH_CONFIG" ]; then
	# shellcheck disable=SC1090
	source "$GENBASH_CONFIG"
fi

REMOVE_SETE=true
REMOVE_COMMON=true
REMOVE_CONFIG=true
REMOVE_EXAMPLE=true
REMOVE_PARSEABLE=true
REMOVE_YES=true
REMOVE_SIGUSR=true

################################################################################
# Start functions
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
	check_dependency
	set_colors false

	declare -a END_LOAD_ARG
	load_arg "$@"
	eval set --
	if [ "${#END_LOAD_ARG[@]}" -gt 0 ]; then
		for arg in "${END_LOAD_ARG[@]}"; do
			eval set -- "$@" "'$arg'"
		done
	fi

	set_colors $COLORS

	if [ $# -eq 0 ]; then
		log 0 'No target given'
		usage
		exit $EX_USAGE
	fi

	if [ $# -eq 1 ]; then
		TARGET_TEMPLATE=$1
		validate_inputs
		main
	else
		log 0 "Too many target given:" "$@"
		log 0 "see --help"
		exit "$EX_USAGE"
	fi
fi
